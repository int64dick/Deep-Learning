為何學習感知器?
  感知器可以說是造就神經網路(深度學習)的演算法,因此學習感知器架構,如同在學習神經網路的重要概念

何謂感知器?
  感知器是收到多個輸入訊號後,再當作一個訊號輸出。而感知器的訊號是指傳遞/不傳遞(1或0)的兩個值。
  當輸入訊號傳送到神經元/節點時會乘上其原有權重,而當神經元統計其訊號總和大過臨界值時才輸出(1)。
  
以python實作如何用感知器完成邏輯電路:
  def AND(x1, x2):                  
    w1 = 0.6
    w2 = 0.4
    b = 0.7
    tmp = x1w1 + x2w2
    if tmp<=b:
      return 0
    elif tmp>b:
      return 1
      
  def NAND(x1, x2):
    x = np.array([x1, x2])
    w = np.array([-0.5, -0.5])
    b = 0.7
    theta = np.sum(x*w)+b
    if theta > 0:
        return 1
    elif theta <=0:
        return 0
        
  def OR(x1,x2):
    x = np.array([x1, x2])
    w = np.array([0.5, 0.5])
    b = -0.4
    theta = np.sum(x*w)+b
    if theta <= 0:
        return 0
    elif theta > 0:
        return 1
        
感知器的極限?
  確切應該說單一感知器的極限。當我們想要單一感知器完成XOR Gate時會陷入瓶頸。
  XOR Gate:當x1, x2其中之一(不包括兩者皆是)為1時,輸出1
  若以視覺化思考閘的動作,我們將感知器的顯示從python語言轉換成數學算式
  y = 0(-0.4+ x1w1+ x2w2 <= 0)
    = 1(-0.4+ x1w1+ x2w2 > 0) 
  算式以圖表顯示會發現直線分割出兩個區域,一邊區域輸出1,另一邊輸出0
  再應付先前試寫的邏輯電路時,以一條直線劃分的區域可以有效區別出邏輯電路的輸出
  然而看完XOR Gate的真值表後,可以顯而易見的了解到一條直線並無法有效劃分
  
多層感知器
  那直線無法劃分XOR Gate的輸出區域,那麼曲線,或者是兩條直線呢?
  def XOR(x1,x2):
    y = AND(NAND(x1, x2), OR(x1, x2))
    return y
  我們可以看到NAND直線輸出1的區域與OR直線輸出1的區域,再經過AND進行求找重疊後,可以完成XOR閘
  那是不是意味著經過多層疊加感知器可以完成任何你想要的區域面積?
  答案是肯定的,然而感知器的if elif條件句對於微分十分不友善,導致無法利用現有知識自動更新權重。                   
